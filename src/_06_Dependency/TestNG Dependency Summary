Topic: TestNG Dependency (dependsOnMethods & dependsOnGroups)

Summary:

- TestNG provides dependency management between test methods.
  This allows certain test methods to be executed only if other methods (or groups) pass.
- You can define dependencies using `dependsOnMethods` or `dependsOnGroups`.
- This is especially useful in larger test scenarios where the outcome of one test affects the execution of others.

Basic Usage:

- dependsOnMethods:
  Allows a test method to depend on one or more other methods.
  If the dependent method fails, the current test will be skipped.

  Example:
  @Test
  public void loginTest() {
      System.out.println("Login successful.");
  }

  @Test(dependsOnMethods = "loginTest")
  public void editAccountTest() {
      System.out.println("Account edit operation.");
  }

- dependsOnGroups:
  Allows a test method to depend on an entire group of tests.
  If any test in the group fails, the dependent method will be skipped.

  Example:
  @Test(groups = "login")
  public void loginTest() {
      System.out.println("Login test.");
  }

  @Test(dependsOnGroups = "login")
  public void editAccountTest() {
      System.out.println("Account edit test.");
  }

Execution Logic:
- If a method or group that another test depends on fails,
  the dependent test will be marked as SKIPPED and will not be executed.
- This helps avoid running unnecessary test steps when preconditions are not met.

Real-World Scenario:
- For example, in an e-commerce site test, a login step must succeed
  before any user account actions can be tested.
  It's logical to define dependency between such steps.
