Topic: TestNG Groups

Summary:

TestNG Groups allow you to categorize test methods, enabling selective execution of specific sets of tests.
Grouping tests helps manage large-scale projects and focus on relevant scenarios more efficiently.

Operations with TestNG Groups:

1. Group Definition:
   - Assign tests to one or more groups using @Test(groups = {"groupName"}).
   - Example:
     @Test(groups = {"smoke"})
     public void smokeTest() {
         // Smoke test logic
     }

2. Executing Groups via XML:
   - Use the <groups> tag in testng.xml to include only specific groups for execution.
   - Example:
     <groups>
         <run>
             <include name="regression"/>
         </run>
     </groups>

3. Group Dependencies:
   - Use dependsOnGroups to define that a test should only run after another group has completed.
   - Example:
     @Test(groups = {"login"}, dependsOnGroups = {"register"})
     public void loginTest() {
         // Login test depends on register group
     }

4. Running Specific Test Sets:
   - Useful in large projects to run only "smoke", "regression", etc.
   - This approach avoids unnecessary executions and speeds up feedback cycles.

Conclusion:

TestNG Groups provide a powerful way to organize and optimize test execution.
With grouping and dependencies, teams can flexibly run different layers of tests as needed.
